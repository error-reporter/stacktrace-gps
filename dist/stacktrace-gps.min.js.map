{"version":3,"sources":["stackframe.js","stacktrace-gps.js"],"names":["root","factory","define","amd","exports","module","StackFrame","this","_isNumber","n","isNaN","parseFloat","isFinite","_capitalize","str","charAt","toUpperCase","substring","_getter","p","booleanProps","numericProps","stringProps","props","concat","obj","Object","i","length","hasOwnProperty","undefined","prototype","getArgs","args","setArgs","v","toString","call","TypeError","getEvalOrigin","evalOrigin","setEvalOrigin","getFunctionName","join","getFileName","getLineNumber","getColumnNumber","Boolean","j","Number","k","String","require","StackTraceGPS","SourceMap","sourceMap","_xdr","url","Promise","resolve","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","substr","responseText","Error","send","_atob","b64str","window","atob","_ensureStackFrameIsLegit","stackframe","fileName","lineNumber","columnNumber","opts","sourceCache","sourceMapConsumerCache","ajax","_get","location","isDataUrl","offline","match","sourceMapStart","encodedSource","source","xhrPromise","method","then","bind","_getSourceMapConsumer","sourceMappingURL","defaultSourceRoot","sourceMapConsumerPromise","sourceMapSource","string","JSON","parse","_parseJson","replace","sourceRoot","SourceMapConsumer","pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","guessedFunctionName","syntaxes","lines","split","code","maxLines","Math","min","line","commentPos","indexOf","len","index","m","exec","_findFunctionName","functionName","defineProperty","create","_ensureSupportedEnvironment","lastSourceMappingUrl","matchSourceMappingUrl","sourceMappingUrlRegExp","_findSourceMappingURL","lastIndexOf","test","sourceMapConsumer","loc","originalPositionFor","column","mappedSource","sourceContentFor","name"],"mappings":"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","file":"stacktrace-gps.min.js","sourcesContent":["(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n\n    function StackFrame(obj) {\n        if (obj instanceof Object) {\n            for (var i = 0; i < props.length; i++) {\n                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                    this['set' + _capitalize(props[i])](obj[props[i]]);\n                }\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n    }\n}(this, function(SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param {String} url\n     * @returns {Promise} with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function(resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if ((req.status >= 200 && req.status < 300) ||\n                        (url.substr(0, 7) === 'file://' && req.responseText)) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    /**\n     * Convert a Base64-encoded string into its original representation.\n     * Used for inline sourcemaps.\n     *\n     * @param {String} b64str Base-64 encoded string\n     * @returns {String} original representation of the base64-encoded string.\n     */\n    function _atob(b64str) {\n        if (typeof window !== 'undefined' && window.atob) {\n            return window.atob(b64str);\n        } else {\n            throw new Error('You must supply a polyfill for window.atob in this environment');\n        }\n    }\n\n    function _parseJson(string) {\n        if (typeof JSON !== 'undefined' && JSON.parse) {\n            return JSON.parse(string);\n        } else {\n            throw new Error('You must supply a polyfill for JSON.parse in this environment');\n        }\n    }\n\n    function _findFunctionName(source, lineNumber/*, columnNumber*/) {\n        var syntaxes = [\n            // {name} = function ({args}) TODO args capture\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n            // function {name}({args}) m[1]=name m[2]=args\n            /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n            // {name} = eval()\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n            // fn_name() {\n            /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?(\\S+)\\s*\\(.*?\\)\\s*\\{/,\n            // {name} = () => {\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n        ];\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '';\n        var maxLines = Math.min(lineNumber, 20);\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            var line = lines[lineNumber - i - 1];\n            var commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                var len = syntaxes.length;\n                for (var index = 0; index < len; index++) {\n                    var m = syntaxes[index].exec(code);\n                    if (m && m[1]) {\n                        return m[1];\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' ||\n            stackframe.lineNumber % 1 !== 0 ||\n            stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' ||\n            stackframe.columnNumber % 1 !== 0 ||\n            stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/mg;\n        var lastSourceMappingUrl;\n        var matchSourceMappingUrl;\n        while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) { // jshint ignore:line\n            lastSourceMappingUrl = matchSourceMappingUrl[1];\n        }\n        if (lastSourceMappingUrl) {\n            return lastSourceMappingUrl;\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n        return new Promise(function(resolve, reject) {\n            var loc = sourceMapConsumer.originalPositionFor({\n                line: stackframe.lineNumber,\n                column: stackframe.columnNumber\n            });\n\n            if (loc.source) {\n                // cache mapped sources\n                var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n                if (mappedSource) {\n                    sourceCache[loc.source] = mappedSource;\n                }\n\n                resolve(\n                    // given stackframe and source location, update stackframe\n                    new StackFrame({\n                        functionName: loc.name || stackframe.functionName,\n                        args: stackframe.args,\n                        fileName: loc.source,\n                        lineNumber: loc.line,\n                        columnNumber: loc.column\n                    }));\n            } else {\n                reject(new Error('Could not get original source for given stackframe and source map'));\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @param {Object} opts\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     *      opts.ajax = Promise returning function to make X-Domain requests\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n        this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};\n\n        this.ajax = opts.ajax || _xdr;\n\n        this._atob = opts.atob || _atob;\n\n        this._get = function _get(location) {\n            return new Promise(function(resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        // data URLs can have parameters.\n                        // see http://tools.ietf.org/html/rfc2397\n                        var supportedEncodingRegexp =\n                            /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                        var match = location.match(supportedEncodingRegexp);\n                        if (match) {\n                            var sourceMapStart = match[0].length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = this._atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        } else {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Creating SourceMapConsumers is expensive, so this wraps the creation of a\n         * SourceMapConsumer in a per-instance cache.\n         *\n         * @param {String} sourceMappingURL = URL to fetch source map from\n         * @param {String} defaultSourceRoot = Default source root for source map if undefined\n         * @returns {Promise} that resolves a SourceMapConsumer\n         */\n        this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n            return new Promise(function(resolve, reject) {\n                if (this.sourceMapConsumerCache[sourceMappingURL]) {\n                    resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n                } else {\n                    var sourceMapConsumerPromise = new Promise(function(resolve, reject) {\n                        return this._get(sourceMappingURL).then(function(sourceMapSource) {\n                            if (typeof sourceMapSource === 'string') {\n                                sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, ''));\n                            }\n                            if (typeof sourceMapSource.sourceRoot === 'undefined') {\n                                sourceMapSource.sourceRoot = defaultSourceRoot;\n                            }\n\n                            resolve(new SourceMap.SourceMapConsumer(sourceMapSource));\n                        }, reject);\n                    }.bind(this));\n                    this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n                    resolve(sourceMapConsumerPromise);\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param {StackFrame} stackframe object\n         * @returns {Promise} that resolves with with source-mapped StackFrame\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function(resolve, reject) {\n                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var lineNumber = stackframe.lineNumber;\n                    var columnNumber = stackframe.columnNumber;\n                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                    // Only replace functionName if we found something\n                    if (guessedFunctionName) {\n                        resolve(new StackFrame({\n                            functionName: guessedFunctionName,\n                            args: stackframe.args,\n                            fileName: stackframe.fileName,\n                            lineNumber: lineNumber,\n                            columnNumber: columnNumber\n                        }));\n                    } else {\n                        resolve(stackframe);\n                    }\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function(source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n                    var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\\/\\/|^\\/\\//i).test(sourceMappingURL)) {\n                        sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n                    }\n\n                    return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot)\n                        .then(function(sourceMapConsumer) {\n                            return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache)\n                                .then(resolve)['catch'](function() {\n                                resolve(stackframe);\n                            });\n                        });\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n"]}